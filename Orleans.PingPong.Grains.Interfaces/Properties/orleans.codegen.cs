//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace Orleans.PingPong
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using Orleans;
    using System.Reflection;
    using Orleans.Serialization;
    using Orleans.PingPong;
    using Orleans.Bus;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PingGrainFactory
    {
        

                        public static IPingGrain GetGrain(long primaryKey, string keyExt)
                        {
                            return Cast(GrainFactoryBase.MakeKeyExtendedGrainReferenceInternal(typeof(IPingGrain), 1448264103, primaryKey, keyExt));
                        }

                        public static IPingGrain GetGrain(long primaryKey, string keyExt, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeKeyExtendedGrainReferenceInternal(typeof(IPingGrain), 1448264103, primaryKey, keyExt, grainClassNamePrefix));
                        }

                        public static IPingGrain GetGrain(Guid primaryKey, string keyExt)
                        {
                            return Cast(GrainFactoryBase.MakeKeyExtendedGrainReferenceInternal(typeof(IPingGrain), 1448264103, primaryKey, keyExt));
                        }

                        public static IPingGrain GetGrain(Guid primaryKey, string keyExt, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeKeyExtendedGrainReferenceInternal(typeof(IPingGrain), 1448264103, primaryKey, keyExt,grainClassNamePrefix));
                        }

            public static IPingGrain Cast(IAddressable grainRef)
            {
                
                return PingGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("Orleans.PingPong.IPingGrain")]
        internal class PingGrainReference : Orleans.GrainReference, IPingGrain, Orleans.IAddressable
        {
            

            public static IPingGrain Cast(IAddressable grainRef)
            {
                
                return (IPingGrain) GrainReference.CastInternal(typeof(IPingGrain), (GrainReference gr) => { return new PingGrainReference(gr);}, grainRef, 1448264103);
            }

                protected override int InterfaceId { get { return 1448264103; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId || interfaceId == -71421061; }

                protected override string InterfaceName { get { return "Orleans.PingPong.IPingGrain"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return PingGrainMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal PingGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PingGrainReference input = ((PingGrainReference)(original));
                return ((PingGrainReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PingGrainReference input = ((PingGrainReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PingGrainReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task Handle(object cmd)
            {

                return base.InvokeMethodAsync<object>(1804230293, new object[] {cmd}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task Attach(Orleans.Bus.Observes o, System.Type e)
            {
GrainFactoryBase.CheckGrainObserverParamInternal(o);

                return base.InvokeMethodAsync<object>(-1295904905, new object[] {o is GrainBase ? Orleans.Bus.ObservesFactory.Cast(o.AsReference()) : o, e}, TimeSpan.Zero );
            }
            
            public System.Threading.Tasks.Task Detach(Orleans.Bus.Observes o, System.Type e)
            {
GrainFactoryBase.CheckGrainObserverParamInternal(o);

                return base.InvokeMethodAsync<object>(-1703330102, new object[] {o is GrainBase ? Orleans.Bus.ObservesFactory.Cast(o.AsReference()) : o, e}, TimeSpan.Zero );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("Orleans.PingPong.IPingGrain", 1448264103)]
    internal class PingGrainMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return 1448264103;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1448264103:  // IPingGrain
                        switch (methodId)
                        {
                            case 1804230293: 
                                await ((IPingGrain)grain).Handle((Object)arguments[0]);
                              return true;
                            case -1295904905: 
                                await ((IPingGrain)grain).Attach((Observes)arguments[0], (Type)arguments[1]);
                              return true;
                            case -1703330102: 
                                await ((IPingGrain)grain).Detach((Observes)arguments[0], (Type)arguments[1]);
                              return true;
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -71421061:  // IObservableGrain
                        switch (methodId)
                        {
                            case -1295904905: 
                                await ((IObservableGrain)grain).Attach((Observes)arguments[0], (Type)arguments[1]);
                              return true;
                            case -1703330102: 
                                await ((IObservableGrain)grain).Detach((Observes)arguments[0], (Type)arguments[1]);
                              return true;
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1448264103:  // IPingGrain
                    switch (methodId)
                    {
                        case 1804230293:
                            return "Handle";
                    case -1295904905:
                            return "Attach";
                    case -1703330102:
                            return "Detach";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -71421061:  // IObservableGrain
                    switch (methodId)
                    {
                        case -1295904905:
                            return "Attach";
                    case -1703330102:
                            return "Detach";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PingGrainProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PongGrainFactory
    {
        

                        public static IPongGrain GetGrain(long primaryKey, string keyExt)
                        {
                            return Cast(GrainFactoryBase.MakeKeyExtendedGrainReferenceInternal(typeof(IPongGrain), -2136568026, primaryKey, keyExt));
                        }

                        public static IPongGrain GetGrain(long primaryKey, string keyExt, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeKeyExtendedGrainReferenceInternal(typeof(IPongGrain), -2136568026, primaryKey, keyExt, grainClassNamePrefix));
                        }

                        public static IPongGrain GetGrain(Guid primaryKey, string keyExt)
                        {
                            return Cast(GrainFactoryBase.MakeKeyExtendedGrainReferenceInternal(typeof(IPongGrain), -2136568026, primaryKey, keyExt));
                        }

                        public static IPongGrain GetGrain(Guid primaryKey, string keyExt, string grainClassNamePrefix)
                        {
                            return Cast(GrainFactoryBase.MakeKeyExtendedGrainReferenceInternal(typeof(IPongGrain), -2136568026, primaryKey, keyExt,grainClassNamePrefix));
                        }

            public static IPongGrain Cast(IAddressable grainRef)
            {
                
                return PongGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [Orleans.GrainReferenceAttribute("Orleans.PingPong.IPongGrain")]
        internal class PongGrainReference : Orleans.GrainReference, IPongGrain, Orleans.IAddressable
        {
            

            public static IPongGrain Cast(IAddressable grainRef)
            {
                
                return (IPongGrain) GrainReference.CastInternal(typeof(IPongGrain), (GrainReference gr) => { return new PongGrainReference(gr);}, grainRef, -2136568026);
            }

                protected override int InterfaceId { get { return -2136568026; } }

                public override bool IsCompatible(int interfaceId) { return interfaceId == this.InterfaceId; }

                protected override string InterfaceName { get { return "Orleans.PingPong.IPongGrain"; } }

                protected override string GetMethodName(int interfaceId, int methodId) { return PongGrainMethodInvoker.GetMethodName(interfaceId, methodId); }
            
            protected internal PongGrainReference(GrainReference reference) : 
                    base(reference)
            {
            }
            
            [Orleans.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PongGrainReference input = ((PongGrainReference)(original));
                return ((PongGrainReference)(GrainReference.CopyGrainReference(input)));
            }
            
            [Orleans.SerializerMethodAttribute()]
            public static void _Serializer(object original, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PongGrainReference input = ((PongGrainReference)(original));
                GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [Orleans.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PongGrainReference.Cast(((Orleans.GrainReference)(GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public System.Threading.Tasks.Task Handle(object message)
            {

                return base.InvokeMethodAsync<object>(1804230293, new object[] {message}, TimeSpan.Zero );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [Orleans.MethodInvokerAttribute("Orleans.PingPong.IPongGrain", -2136568026)]
    internal class PongGrainMethodInvoker : IGrainMethodInvoker
    {
        
        public int InterfaceId
        {
            get
            {
                return -2136568026;
            }
        }
        
        public async System.Threading.Tasks.Task<Object> Invoke(IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {
                if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -2136568026:  // IPongGrain
                        switch (methodId)
                        {
                            case 1804230293: 
                                await ((IPongGrain)grain).Handle((Object)arguments[0]);
                              return true;
                            default: 
                                throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -2136568026:  // IPongGrain
                    switch (methodId)
                    {
                        case 1804230293:
                            return "Handle";
                    case -606142484:
                            return "GetProperties";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [Serializable()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.814.60418")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PongGrainProperties
    {
        

            public Dictionary<string,object> AsDictionary()
            {  
                var retValue = new Dictionary<string,object>();
                return retValue;
            }
    }
    
    [Orleans.RegisterSerializerAttribute()]
    internal class Orleans_PingPong_MessageSerialization
    {
        
        static Orleans_PingPong_MessageSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Orleans.PingPong.Message input = ((Orleans.PingPong.Message)(untypedInput));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Orleans.PingPong.Message result = new Orleans.PingPong.Message();
            return result;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(Orleans.PingPong.Message), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [Orleans.RegisterSerializerAttribute()]
    internal class Orleans_PingPong_InitializeSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        static Orleans_PingPong_InitializeSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Orleans.PingPong.Initialize input = ((Orleans.PingPong.Initialize)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Destination, stream, typeof(String));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Repeats, stream, typeof(Int64));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Orleans.PingPong.Initialize result = ((Orleans.PingPong.Initialize)(System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof(Orleans.PingPong.Initialize))));
            object objResult = ((object)(result));
            object temp1 = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((Int64)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Int64), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(Orleans.PingPong.Initialize), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Orleans.PingPong.Initialize).GetField("Destination", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Orleans.PingPong.Initialize).GetField("Repeats", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [Orleans.RegisterSerializerAttribute()]
    internal class Orleans_PingPong_RunBenchmarkSerialization
    {
        
        static Orleans_PingPong_RunBenchmarkSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Orleans.PingPong.RunBenchmark input = ((Orleans.PingPong.RunBenchmark)(untypedInput));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Orleans.PingPong.RunBenchmark result = new Orleans.PingPong.RunBenchmark();
            return result;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(Orleans.PingPong.RunBenchmark), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [Orleans.RegisterSerializerAttribute()]
    internal class Orleans_PingPong_BenchmarkDoneSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        static Orleans_PingPong_BenchmarkDoneSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Orleans.PingPong.BenchmarkDone input = ((Orleans.PingPong.BenchmarkDone)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Pings, stream, typeof(Int64));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Pongs, stream, typeof(Int64));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Orleans.PingPong.BenchmarkDone result = ((Orleans.PingPong.BenchmarkDone)(System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof(Orleans.PingPong.BenchmarkDone))));
            object objResult = ((object)(result));
            object temp1 = ((Int64)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Int64), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((Int64)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Int64), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(Orleans.PingPong.BenchmarkDone), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Orleans.PingPong.BenchmarkDone).GetField("Pings", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Orleans.PingPong.BenchmarkDone).GetField("Pongs", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [Orleans.RegisterSerializerAttribute()]
    internal class Orleans_PingPong_PongSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        static Orleans_PingPong_PongSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Orleans.PingPong.Pong input = ((Orleans.PingPong.Pong)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Payload, stream, typeof(Message));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Sender, stream, typeof(String));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Orleans.PingPong.Pong result = ((Orleans.PingPong.Pong)(System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof(Orleans.PingPong.Pong))));
            object objResult = ((object)(result));
            object temp1 = ((Message)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Message), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(Orleans.PingPong.Pong), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Orleans.PingPong.Pong).GetField("Payload", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Orleans.PingPong.Pong).GetField("Sender", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
    
    [Orleans.RegisterSerializerAttribute()]
    internal class Orleans_PingPong_PingSerialization
    {
        
        private static System.Reflection.FieldInfo fieldInfo1;
        
        private static System.Reflection.FieldInfo fieldInfo2;
        
        static Orleans_PingPong_PingSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Orleans.PingPong.Ping input = ((Orleans.PingPong.Ping)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Payload, stream, typeof(Message));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Sender, stream, typeof(String));
        }
        
        public static object Deserializer(System.Type expected, Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Orleans.PingPong.Ping result = ((Orleans.PingPong.Ping)(System.Runtime.Serialization.FormatterServices.GetUninitializedObject(typeof(Orleans.PingPong.Ping))));
            object objResult = ((object)(result));
            object temp1 = ((Message)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(Message), stream)));
            fieldInfo1.SetValue(objResult, temp1);
            object temp2 = ((String)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(String), stream)));
            fieldInfo2.SetValue(objResult, temp2);
            return objResult;
        }
        
        public static void Register()
        {
            Orleans.Serialization.SerializationManager.Register(typeof(Orleans.PingPong.Ping), DeepCopier, Serializer, Deserializer);
            fieldInfo1 = typeof(Orleans.PingPong.Ping).GetField("Payload", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
            fieldInfo2 = typeof(Orleans.PingPong.Ping).GetField("Sender", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)));
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
